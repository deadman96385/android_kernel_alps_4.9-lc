/*
 * Copyright (C) 2017 MediaTek Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 */

#ifndef _MTK_MDPM_PLATFORM_H_
#define _MTK_MDPM_PLATFORM_H_

#define MD_POWER_METER_ENABLE 0

#if MD_POWER_METER_ENABLE
/* #define MD_POWER_UT */
#endif

#define MAX_MD1_POWER	4000	/* mW */
#define MAX_DBM_POWER	\
	(MAX_PW_MD1_PA_4G_upL1_SECTION_1 + MAX_PW_MD1_RF_4G_upL1_SECTION_1)

#define GUARDING_PATTERN	0

#define SECTION_LEN	0xFFFFFFFF
/* total 4 byte, 6 section =  11 11111 11111 11111 11111 11111 11111 */
#define SECTION_VALUE	0x1F
/* each section is 0x1F = bit(11111) */

enum section_level_tbl {
	BIT_SECTION_1 = 0,
	BIT_SECTION_2 = 5,
	BIT_SECTION_3 = 10,
	BIT_SECTION_4 = 15,
	BIT_SECTION_5 = 20,
	BIT_SECTION_6 = 25,
	SECTION_NUM = 6
};

enum md1_scenario {
	S_STANDBY = 0,
	S_2G_CONNECT,
	S_3G_C2K_TALKING,
	S_3G_4G_C2K_PAGING,
	S_3G_C2K_DATALINK,
	S_4G_DL_1CC,
	S_4G_DL_2CC,
	SCENARIO_NUM
};

enum share_mem_mapping {	/* each of 4 byte */
	DBM_2G_TABLE = 0,
	DBM_3G_TABLE,
	DBM_4G_TABLE,
	DBM_4G_1_TABLE,
	DBM_4G_2_TABLE,
	DBM_4G_3_TABLE,
	DBM_4G_4_TABLE,
	DBM_4G_5_TABLE,
	DBM_4G_6_TABLE,
	DBM_4G_7_TABLE,
	DBM_4G_8_TABLE,
	DBM_4G_9_TABLE,
	DBM_4G_10_TABLE,
	DBM_4G_11_TABLE,
	DBM_4G_12_TABLE,
	DBM_TDD_TABLE,
	DBM_C2K_1_TABLE,
	DBM_C2K_2_TABLE,
	DBM_C2K_3_TABLE,
	DBM_C2K_4_TABLE,
	SECTION_LEVLE_2G,
	SECTION_LEVLE_3G,
	SECTION_LEVLE_4G,
	SECTION_1_LEVLE_4G,
	SECTION_2_LEVLE_4G,
	SECTION_3_LEVLE_4G,
	SECTION_4_LEVLE_4G,
	SECTION_5_LEVLE_4G,
	SECTION_6_LEVLE_4G,
	SECTION_7_LEVLE_4G,
	SECTION_8_LEVLE_4G,
	SECTION_9_LEVLE_4G,
	SECTION_10_LEVLE_4G,
	SECTION_11_LEVLE_4G,
	SECTION_12_LEVLE_4G,
	SECTION_LEVLE_TDD,
	SECTION_1_LEVLE_C2K,
	SECTION_2_LEVLE_C2K,
	SECTION_3_LEVLE_C2K,
	SECTION_4_LEVLE_C2K,
	SHARE_MEM_BLOCK_NUM
};

/*
 * MD1 Section level (can't more than SECTION_VALUE)
 */
/* Each section has only 5 bits. The range is from 0 to 31 */

//Samuel: move to platform
enum md1_section_level_tbl_2g {
	VAL_MD1_2G_SECTION_1 = 31,
	VAL_MD1_2G_SECTION_2 = 29,
	VAL_MD1_2G_SECTION_3 = 25,
	VAL_MD1_2G_SECTION_4 = 19,
	VAL_MD1_2G_SECTION_5 = 11,
	VAL_MD1_2G_SECTION_6 = 0
};

enum md1_section_level_tbl_3g {
	VAL_MD1_3G_SECTION_1 = 22,
	VAL_MD1_3G_SECTION_2 = 20,
	VAL_MD1_3G_SECTION_3 = 17,
	VAL_MD1_3G_SECTION_4 = 16,
	VAL_MD1_3G_SECTION_5 = 11,
	VAL_MD1_3G_SECTION_6 = 0
};

enum md1_section_level_tbl_4g_upL1 {
	VAL_MD1_4G_upL1_SECTION_1 = 21,
	VAL_MD1_4G_upL1_SECTION_2 = 19,
	VAL_MD1_4G_upL1_SECTION_3 = 17,
	VAL_MD1_4G_upL1_SECTION_4 = 16,
	VAL_MD1_4G_upL1_SECTION_5 = 11,
	VAL_MD1_4G_upL1_SECTION_6 = 0
};

enum md1_section_level_tbl_4g_upL2 {
	VAL_MD1_4G_upL2_SECTION_1 = 21,
	VAL_MD1_4G_upL2_SECTION_2 = 19,
	VAL_MD1_4G_upL2_SECTION_3 = 17,
	VAL_MD1_4G_upL2_SECTION_4 = 16,
	VAL_MD1_4G_upL2_SECTION_5 = 11,
	VAL_MD1_4G_upL2_SECTION_6 = 0
};

enum md1_section_level_tbl_tdd {
	VAL_MD1_TDD_SECTION_1 = 21,
	VAL_MD1_TDD_SECTION_2 = 19,
	VAL_MD1_TDD_SECTION_3 = 18,
	VAL_MD1_TDD_SECTION_4 = 16,
	VAL_MD1_TDD_SECTION_5 = 13,
	VAL_MD1_TDD_SECTION_6 = 0
};

enum md1_section_level_tbl_c2k {
	VAL_MD1_C2K_SECTION_1 = 23,
	VAL_MD1_C2K_SECTION_2 = 22,
	VAL_MD1_C2K_SECTION_3 = 20,
	VAL_MD1_C2K_SECTION_4 = 17,
	VAL_MD1_C2K_SECTION_5 = 16,
	VAL_MD1_C2K_SECTION_6 = 0
};

/*
 * MD1 Scenario power
 */

enum md1_scenario_max_pwr_tbl {
	MAX_PW_STANDBY = 1,
	MAX_PW_2G_CONNECT = 2,
	MAX_PW_3G_C2K_TALKING = 3,
	MAX_PW_3G_4G_C2K_PAGING = 4,
	MAX_PW_3G_C2K_DATALINK = 5,
	MAX_PW_4G_DL_1CC = 6,
	MAX_PW_4G_DL_2CC = 7
};

enum md1_scenario_avg_pwr_tbl {
	AVG_PW_STANDBY = 11,
	AVG_PW_2G_CONNECT = 12,
	AVG_PW_3G_C2K_TALKING = 13,
	AVG_PW_3G_4G_C2K_PAGING = 14,
	AVG_PW_3G_C2K_DATALINK = 15,
	AVG_PW_4G_DL_1CC = 16,
	AVG_PW_4G_DL_2CC = 17
};

/*
 * MD1 PA power
 */

enum md1_pa_max_pwr_tbl_2g {
	MAX_PW_MD1_PA_2G_SECTION_1 = 12100,
	MAX_PW_MD1_PA_2G_SECTION_2 = 12200,
	MAX_PW_MD1_PA_2G_SECTION_3 = 12300,
	MAX_PW_MD1_PA_2G_SECTION_4 = 12400,
	MAX_PW_MD1_PA_2G_SECTION_5 = 12500,
	MAX_PW_MD1_PA_2G_SECTION_6 = 12600
};

enum md1_pa_avg_pwr_tbl_2g {
	AVG_PW_MD1_PA_2G_SECTION_1 = 22100,
	AVG_PW_MD1_PA_2G_SECTION_2 = 22200,
	AVG_PW_MD1_PA_2G_SECTION_3 = 22300,
	AVG_PW_MD1_PA_2G_SECTION_4 = 22400,
	AVG_PW_MD1_PA_2G_SECTION_5 = 22500,
	AVG_PW_MD1_PA_2G_SECTION_6 = 22600
};

enum md1_pa_max_pwr_tbl_3g {
	MAX_PW_MD1_PA_3G_SECTION_1 = 13100,
	MAX_PW_MD1_PA_3G_SECTION_2 = 13200,
	MAX_PW_MD1_PA_3G_SECTION_3 = 13300,
	MAX_PW_MD1_PA_3G_SECTION_4 = 13400,
	MAX_PW_MD1_PA_3G_SECTION_5 = 13500,
	MAX_PW_MD1_PA_3G_SECTION_6 = 13600
};

enum md1_pa_avg_pwr_tbl_3g {
	AVG_PW_MD1_PA_3G_SECTION_1 = 23100,
	AVG_PW_MD1_PA_3G_SECTION_2 = 23200,
	AVG_PW_MD1_PA_3G_SECTION_3 = 23300,
	AVG_PW_MD1_PA_3G_SECTION_4 = 23400,
	AVG_PW_MD1_PA_3G_SECTION_5 = 23500,
	AVG_PW_MD1_PA_3G_SECTION_6 = 23600
};

enum md1_pa_max_pwr_tbl_4g_upL1 {
	MAX_PW_MD1_PA_4G_upL1_SECTION_1 = 14100,
	MAX_PW_MD1_PA_4G_upL1_SECTION_2 = 14200,
	MAX_PW_MD1_PA_4G_upL1_SECTION_3 = 14300,
	MAX_PW_MD1_PA_4G_upL1_SECTION_4 = 14400,
	MAX_PW_MD1_PA_4G_upL1_SECTION_5 = 14500,
	MAX_PW_MD1_PA_4G_upL1_SECTION_6 = 14600
};

enum md1_pa_avg_pwr_tbl_4g_upL1 {
	AVG_PW_MD1_PA_4G_upL1_SECTION_1 = 24100,
	AVG_PW_MD1_PA_4G_upL1_SECTION_2 = 24200,
	AVG_PW_MD1_PA_4G_upL1_SECTION_3 = 24300,
	AVG_PW_MD1_PA_4G_upL1_SECTION_4 = 24400,
	AVG_PW_MD1_PA_4G_upL1_SECTION_5 = 24500,
	AVG_PW_MD1_PA_4G_upL1_SECTION_6 = 24600
};

enum md1_pa_max_pwr_tbl_4g_upL2 {
	MAX_PW_MD1_PA_4G_upL2_SECTION_1 = 15100,
	MAX_PW_MD1_PA_4G_upL2_SECTION_2 = 15200,
	MAX_PW_MD1_PA_4G_upL2_SECTION_3 = 15300,
	MAX_PW_MD1_PA_4G_upL2_SECTION_4 = 15400,
	MAX_PW_MD1_PA_4G_upL2_SECTION_5 = 15500,
	MAX_PW_MD1_PA_4G_upL2_SECTION_6 = 15600
};

enum md1_pa_avg_pwr_tbl_4g_upL2 {
	AVG_PW_MD1_PA_4G_upL2_SECTION_1 = 25100,
	AVG_PW_MD1_PA_4G_upL2_SECTION_2 = 25200,
	AVG_PW_MD1_PA_4G_upL2_SECTION_3 = 25300,
	AVG_PW_MD1_PA_4G_upL2_SECTION_4 = 25400,
	AVG_PW_MD1_PA_4G_upL2_SECTION_5 = 25500,
	AVG_PW_MD1_PA_4G_upL2_SECTION_6 = 25600
};

enum md1_max_pa_pwr_tbl_c2k {
	MAX_PW_MD1_PA_C2K_SECTION_1 = 16100,
	MAX_PW_MD1_PA_C2K_SECTION_2 = 16200,
	MAX_PW_MD1_PA_C2K_SECTION_3 = 16300,
	MAX_PW_MD1_PA_C2K_SECTION_4 = 16400,
	MAX_PW_MD1_PA_C2K_SECTION_5 = 16500,
	MAX_PW_MD1_PA_C2K_SECTION_6 = 16600
};

enum md1_avg_pa_pwr_tbl_c2k {
	AVG_PW_MD1_PA_C2K_SECTION_1 = 26100,
	AVG_PW_MD1_PA_C2K_SECTION_2 = 26200,
	AVG_PW_MD1_PA_C2K_SECTION_3 = 26300,
	AVG_PW_MD1_PA_C2K_SECTION_4 = 26400,
	AVG_PW_MD1_PA_C2K_SECTION_5 = 26500,
	AVG_PW_MD1_PA_C2K_SECTION_6 = 26600
};

/*
 * MD1 RF power
 */
enum md1_max_rf_pwr_tbl_2g {
	MAX_PW_MD1_RF_2G_SECTION_1 = 12100000,
	MAX_PW_MD1_RF_2G_SECTION_2 = 12200000,
	MAX_PW_MD1_RF_2G_SECTION_3 = 12300000,
	MAX_PW_MD1_RF_2G_SECTION_4 = 12400000,
	MAX_PW_MD1_RF_2G_SECTION_5 = 12500000,
	MAX_PW_MD1_RF_2G_SECTION_6 = 12600000
};

enum md1_avg_rf_pwr_tbl_2g {
	AVG_PW_MD1_RF_2G_SECTION_1 = 22100000,
	AVG_PW_MD1_RF_2G_SECTION_2 = 22200000,
	AVG_PW_MD1_RF_2G_SECTION_3 = 22300000,
	AVG_PW_MD1_RF_2G_SECTION_4 = 22400000,
	AVG_PW_MD1_RF_2G_SECTION_5 = 22500000,
	AVG_PW_MD1_RF_2G_SECTION_6 = 22600000
};

enum md1_rf_max_pwr_tbl_3g {
	MAX_PW_MD1_RF_3G_SECTION_1 = 13100000,
	MAX_PW_MD1_RF_3G_SECTION_2 = 13200000,
	MAX_PW_MD1_RF_3G_SECTION_3 = 13300000,
	MAX_PW_MD1_RF_3G_SECTION_4 = 13400000,
	MAX_PW_MD1_RF_3G_SECTION_5 = 13500000,
	MAX_PW_MD1_RF_3G_SECTION_6 = 13600000
};

enum md1_rf_avg_pwr_tbl_3g {
	AVG_PW_MD1_RF_3G_SECTION_1 = 23100000,
	AVG_PW_MD1_RF_3G_SECTION_2 = 23200000,
	AVG_PW_MD1_RF_3G_SECTION_3 = 23300000,
	AVG_PW_MD1_RF_3G_SECTION_4 = 23400000,
	AVG_PW_MD1_RF_3G_SECTION_5 = 23500000,
	AVG_PW_MD1_RF_3G_SECTION_6 = 23600000
};

enum md1_rf_max_pwr_tbl_4g_upL1 {
	MAX_PW_MD1_RF_4G_upL1_SECTION_1 = 14100000,
	MAX_PW_MD1_RF_4G_upL1_SECTION_2 = 14200000,
	MAX_PW_MD1_RF_4G_upL1_SECTION_3 = 14300000,
	MAX_PW_MD1_RF_4G_upL1_SECTION_4 = 14400000,
	MAX_PW_MD1_RF_4G_upL1_SECTION_5 = 14500000,
	MAX_PW_MD1_RF_4G_upL1_SECTION_6 = 14600000
};

enum md1_rf_avg_pwr_tbl_4g_upL1 {
	AVG_PW_MD1_RF_4G_upL1_SECTION_1 = 24100000,
	AVG_PW_MD1_RF_4G_upL1_SECTION_2 = 24200000,
	AVG_PW_MD1_RF_4G_upL1_SECTION_3 = 24300000,
	AVG_PW_MD1_RF_4G_upL1_SECTION_4 = 24400000,
	AVG_PW_MD1_RF_4G_upL1_SECTION_5 = 24500000,
	AVG_PW_MD1_RF_4G_upL1_SECTION_6 = 24600000
};

enum md1_rf_max_pwr_tbl_4g_upL2 {
	MAX_PW_MD1_RF_4G_upL2_SECTION_1 = 15100000,
	MAX_PW_MD1_RF_4G_upL2_SECTION_2 = 15200000,
	MAX_PW_MD1_RF_4G_upL2_SECTION_3 = 15300000,
	MAX_PW_MD1_RF_4G_upL2_SECTION_4 = 15400000,
	MAX_PW_MD1_RF_4G_upL2_SECTION_5 = 15500000,
	MAX_PW_MD1_RF_4G_upL2_SECTION_6 = 15600000
};

enum md1_rf_avg_pwr_tbl_4g_upL2 {
	AVG_PW_MD1_RF_4G_upL2_SECTION_1 = 25100000,
	AVG_PW_MD1_RF_4G_upL2_SECTION_2 = 25200000,
	AVG_PW_MD1_RF_4G_upL2_SECTION_3 = 25300000,
	AVG_PW_MD1_RF_4G_upL2_SECTION_4 = 25400000,
	AVG_PW_MD1_RF_4G_upL2_SECTION_5 = 25500000,
	AVG_PW_MD1_RF_4G_upL2_SECTION_6 = 25600000
};

enum md1_rf_max_pwr_tbl_c2k {
	MAX_PW_MD1_RF_C2K_SECTION_1 = 16100000,
	MAX_PW_MD1_RF_C2K_SECTION_2 = 16200000,
	MAX_PW_MD1_RF_C2K_SECTION_3 = 16300000,
	MAX_PW_MD1_RF_C2K_SECTION_4 = 16400000,
	MAX_PW_MD1_RF_C2K_SECTION_5 = 16500000,
	MAX_PW_MD1_RF_C2K_SECTION_6 = 16600000
};

enum md1_rf_avg_pwr_tbl_c2k {
	AVG_PW_MD1_RF_C2K_SECTION_1 = 26100000,
	AVG_PW_MD1_RF_C2K_SECTION_2 = 26200000,
	AVG_PW_MD1_RF_C2K_SECTION_3 = 26300000,
	AVG_PW_MD1_RF_C2K_SECTION_4 = 26400000,
	AVG_PW_MD1_RF_C2K_SECTION_5 = 26500000,
	AVG_PW_MD1_RF_C2K_SECTION_6 = 26600000
};

#define MAX_DBM_FUNC_NUM 5

struct mdpm {
	int scenario_power[POWER_CATEGORY_NUM];

	int (*dbm_power_func[MAX_DBM_FUNC_NUM])(u32 *, unsigned int);

};

#ifdef MD_POWER_UT
extern void md_power_meter_ut(void);
#endif
extern void init_md1_section_level(u32 *share_mem);
extern unsigned int get_md1_scenario(u32 share_reg,
	unsigned int power_category);
extern int get_md1_scenario_power(unsigned int scenario,
	unsigned int power_category);
extern int get_md1_dBm_power(unsigned int scenario, u32 *share_mem,
	unsigned int power_category);

#endif /* _MTK_MDPM_PLATFORM_H_ */
